[size=large][font=Courier][align=center][b]ESOTERIC PROGRAMMING LANGUAGE CHALLENGE[/b][/align][/font][/size]

[size=x-large][b]If there are requests for clarification, PLEASE do tell me VIA PM.[/b][/size]

This is a puzzle. This might be a very difficult puzzle.
It is as much a game as a puzzle is a game - I can't say how much. In either case, if it could interest you, if challenges are your place of interest, then this might be a very interesting one.

The topic here is an [b]ESOTERIC PROGRAMMING LANGUAGE[/b] called "Dao."

There are 16 possible symbols in Dao. 13 have been determined. 2 are probably reserved for input and output, likely 0001 and 0100. 1111 is completely up in the air.

[align=center][img]https://dl.dropboxusercontent.com/u/26075333/%5BWorks%5D/Programs/Dao/DaoSpec1.png[/img]
[b][font=Courier]FIGURE 1: SPECIFICATION[/font][/align][/b]

The behavior of these is as such:

[font=Courier][align=center][img]https://dl.dropboxusercontent.com/u/26075333/%5BWorks%5D/Programs/Dao/DaoSpec2.png[/img]
[b]FIGURE 2: DATA SYMBOLS A

EDGE CASES AND MANAGEMENT:

On selection of a single bit:
[/b][/align]
-- DEALC terminates the program.
-- SPLIT moves the data pointer to the lower level if possible and SPLITS. If impossible, act as IDLES.
-- HALVE moves the data pointer to the lower level and HALVEs. If impossible, act as IDLES.
-- SWAPS acts as IDLES.

[align=center][b]On calling LATER when on right branch:[/b][/align]
-- Acts as MERGE.

[b][align=center]On selection of entire data:[/align][/b]
-- MERGE moves the data pointer to the upper level if possible. It impossible, acts as IDLES.[/font]

Then there are the stranger ones.

[font=Courier][align=center][img]https://dl.dropboxusercontent.com/u/26075333/%5BWorks%5D/Programs/Dao/DaoSpec3.png[/img]
[b]FIGURE 3: DATA SYMBOLS B[/b]

[img]https://dl.dropboxusercontent.com/u/26075333/%5BWorks%5D/Programs/Dao/DaoSpec4.png[/img]
[b]FIGURE 4: LEVEL AND EXECS[/b][/align][/font]

LEVELS 3 and above have not yet been decided, but the overall idea is that more and more functionality is stripped away.

The functionality of EXECS is murky and terrifying.

Just this information, by itself, likely is not enough to really explain it.

Here is a bad demo:

[align=center][img]https://dl.dropboxusercontent.com/u/26075333/%5BWorks%5D/Programs/Dao/baddemo.gif[/img]
[b][font=Courier]FIGURE 5: BAD DEMO[/font][/align][/b]

It is an example of a bad program. It is unbalanced - the < will eventually just continue to increment and increment the level. > is necessary to restore functionality.

A lot of documentation is also in need of fixing.

An interpreter (as a crutch) is in the works. The plan is to implement a compiler in C.

[align=center]===================[/align]

[size=large]WHAT IS THE CHALLENGE?[/size]

Challenges will be updated as challenges are solved.

[b]Challenge 1: Descending Counter[/b]
4 bits.
Initialize a selection of 4 bits representing an unsigned binary numeral.
The program must, in order, alter these 4 bits in such a way consistent with decrement - 1111 -> 1110 -> 1101 -> 1100 -> 1011 -> 1010 -> 1001 and so on. On each decrement, the program must pass over the same IDLES command, which could be, in theory, replaced with another program, such that this counter program could be used as a while loop iterating N times, where N would be the number initialized in the 4 bit selection.

[align=center]===================[/align]

If there are suggestions for the 1111 symbol, please do tell me.
If there are suggestions for the functionality of LEVEL 3 and above, please do tell me.

I hope that this is a fun challenge, not a mind-rending headache creator.

Though, if it's fun, headaches don't matter.

[size=x-large][b]Once again, if there are requests for clarification, PLEASE do tell me VIA PM.[/b][/size]